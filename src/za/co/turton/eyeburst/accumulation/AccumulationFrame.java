/*
 * AccumulationFrame.java
 *
 * Created on August 1, 2006, 12:58 PM
 */

package za.co.turton.eyeburst.accumulation;

import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import za.co.turton.eyeburst.*;

/**
 *
 * @author  james
 */
public class AccumulationFrame extends javax.swing.JFrame implements TowerUpdateListener {
    
    private Map<Tower, String> towers;
    
    private Map<Tower, String> pendingTowers;
    
    private TowerPublisher dataHub;
    
    private int sampleSize;
    
    /** Creates new form AccumulationFrame */
    public AccumulationFrame(TowerPublisher dataHub, int sampleSize) {
        initComponents();
        this.setTitle(this.getTitle()+" (Sample Size = "+sampleSize+")");
        chartPanel.setTransferHandler(new TowerTransferHandler());
        this.towers = new HashMap<Tower, String>();
        this.pendingTowers = new HashMap<Tower, String>();
        this.sampleSize = sampleSize;
        this.dataHub = dataHub;
    }
    
    public boolean addTower(String towerCode) {
        
        if (pendingTowers.containsKey(towerCode))
            return false;
        
        String sampleName = JOptionPane.showInputDialog(this, "Sample Name");        
        Tower tower = dataHub.createTower(towerCode);
        pendingTowers.put(tower, sampleName);
        JLabel label = new JLabel(tower.getName()+": "+sampleName);
        label.setVisible(true);
        pendingsPanel.add(label);
        pack();
        
        return true;
    }    
    
    public void towerUpdate(TowerUpdateEvent evt) {
        for (Tower tower : pendingTowers.keySet())
            if (tower.getDataCount() >= this.sampleSize) {
                String name = pendingTowers.remove(tower);
                towers.put(tower, name);
            }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        chartPanel = new javax.swing.JPanel();
        pendingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Accumulated Signal Datasets");
        org.jdesktop.layout.GroupLayout chartPanelLayout = new org.jdesktop.layout.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 491, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 220, Short.MAX_VALUE)
        );
        getContentPane().add(chartPanel);

        pendingsPanel.setPreferredSize(new java.awt.Dimension(292, 80));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("jLabel1");
        pendingsPanel.add(jLabel1);

        pendingsPanel.add(jProgressBar1);

        getContentPane().add(pendingsPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JPanel pendingsPanel;
    // End of variables declaration//GEN-END:variables
    
}
